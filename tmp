.intel_syntax
.global main

main:
PUSH %ebp
MOV %ebp, %esp
SUB %esp, 0
MOV t0, %ebx
MOV t1, %edi
MOV t2, %esi
L$5:
PUSH 4
CALL L_halloc
ADD %esp, 4
MOV t7, %eax
PUSH 5
PUSH 0
PUSH t7
CALL SumClass$f
ADD %esp, 12
MOV t8, %eax
PUSH t8
CALL L_println_int
ADD %esp, 4
MOV t9, %eax
MOV t0, 0
JMP L$6
L$6:
MOV %ebx, t0
MOV %edi, t1
MOV %esi, t2
MOV %esp, %ebp
POP %ebp
RET

SumClass$f:
PUSH %ebp
MOV %ebp, %esp
SUB %esp, 0
MOV t7, %ebx
MOV t8, %edi
MOV t9, %esi
L$7:
MOV t10, DWORD PTR [%ebp+12]
MOV t3, t10
ADD t3, DWORD PTR [%ebp+16]
MOV t3, t3
MOV t11, DWORD PTR [%ebp+8]
LEA t4, DWORD PTR [%ebp+8]
PUSH t3
PUSH t4
CALL SumClass$g
ADD %esp, 8
MOV t12, %eax
MOV DWORD PTR [t11+0], t12
MOV t5, 0
CMP DWORD PTR [%ebp+16], 1
JL L$3
L$4:
CMP t5, 1
JE L$0
L$1:
MOV t5, -1
ADD t5, DWORD PTR [%ebp+16]
LEA t6, DWORD PTR [%ebp+8]
PUSH t5
PUSH t3
PUSH t6
CALL SumClass$f
ADD %esp, 12
MOV t13, %eax
MOV t4, t13
JMP L$2
L$2:
MOV t2, t4
JMP L$8
L$0:
MOV t4, t3
JMP L$2
L$3:
MOV t5, 1
JMP L$4
L$8:
MOV %ebx, t7
MOV %edi, t8
MOV %esi, t9
MOV %esp, %ebp
POP %ebp
RET

SumClass$g:
PUSH %ebp
MOV %ebp, %esp
SUB %esp, 0
MOV t10, %ebx
MOV t11, %edi
MOV t12, %esi
L$9:
MOV t6, DWORD PTR [%ebp+12]
JMP L$10
L$10:
MOV %ebx, t10
MOV %edi, t11
MOV %esi, t12
MOV %esp, %ebp
POP %ebp
RET


