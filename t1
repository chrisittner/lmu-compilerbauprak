.intel_syntax
.global main

main:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t131, %ebx
	MOV t132, %edi
	MOV t133, %esi
L$48:
	PUSH 0
	CALL L_halloc
	ADD %esp, 4
	MOV t43, %eax
	PUSH t43
	CALL LL$Start
	ADD %esp, 4
	MOV t44, %eax
	PUSH t44
	CALL L_println_int
	ADD %esp, 4
	MOV t45, %eax
	MOV %eax, 0
	JMP L$49
L$49:
	MOV %ebx, t131
	MOV %edi, t132
	MOV %esi, t133
	MOV %esp, %ebp
	POP %ebp
	RET

Element$Init:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t137, %ebx
	MOV t138, %edi
	MOV t139, %esi
L$50:
	MOV t46, DWORD PTR [%ebp+8]
	MOV t134, DWORD PTR [%ebp+12]
	MOV DWORD PTR [t46+0], t134
	MOV t47, DWORD PTR [%ebp+8]
	MOV t135, DWORD PTR [%ebp+16]
	MOV DWORD PTR [t47+4], t135
	MOV t48, DWORD PTR [%ebp+8]
	MOV t136, DWORD PTR [%ebp+20]
	MOV DWORD PTR [t48+8], t136
	MOV %eax, 1
	JMP L$51
L$51:
	MOV %ebx, t137
	MOV %edi, t138
	MOV %esi, t139
	MOV %esp, %ebp
	POP %ebp
	RET

Element$GetAge:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t140, %ebx
	MOV t141, %edi
	MOV t142, %esi
L$52:
	MOV t49, DWORD PTR [%ebp+8]
	MOV %eax, DWORD PTR [t49+0]
	JMP L$53
L$53:
	MOV %ebx, t140
	MOV %edi, t141
	MOV %esi, t142
	MOV %esp, %ebp
	POP %ebp
	RET

Element$GetSalary:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t143, %ebx
	MOV t144, %edi
	MOV t145, %esi
L$54:
	MOV t50, DWORD PTR [%ebp+8]
	MOV %eax, DWORD PTR [t50+4]
	JMP L$55
L$55:
	MOV %ebx, t143
	MOV %edi, t144
	MOV %esi, t145
	MOV %esp, %ebp
	POP %ebp
	RET

Element$GetMarried:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t146, %ebx
	MOV t147, %edi
	MOV t148, %esi
L$56:
	MOV t51, DWORD PTR [%ebp+8]
	MOV %eax, DWORD PTR [t51+8]
	JMP L$57
L$57:
	MOV %ebx, t146
	MOV %edi, t147
	MOV %esi, t148
	MOV %esp, %ebp
	POP %ebp
	RET

Element$Equal:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t152, %ebx
	MOV t153, %edi
	MOV t154, %esi
L$58:
	MOV t1, 1
	PUSH DWORD PTR [%ebp+12]
	CALL Element$GetAge
	ADD %esp, 4
	MOV t52, %eax
	MOV t2, t52
	MOV t53, DWORD PTR [%ebp+8]
	PUSH DWORD PTR [t53+0]
	PUSH t2
	PUSH DWORD PTR [%ebp+8]
	CALL Element$Compare
	ADD %esp, 12
	MOV t54, %eax
	MOV t149, 1
	SUB t149, t54
	CMP t149, 1
	JE L$0
L$1:
	PUSH DWORD PTR [%ebp+12]
	CALL Element$GetSalary
	ADD %esp, 4
	MOV t55, %eax
	MOV t3, t55
	MOV t56, DWORD PTR [%ebp+8]
	PUSH DWORD PTR [t56+4]
	PUSH t3
	PUSH DWORD PTR [%ebp+8]
	CALL Element$Compare
	ADD %esp, 12
	MOV t57, %eax
	MOV t150, 1
	SUB t150, t57
	CMP t150, 1
	JE L$3
L$4:
	MOV t58, DWORD PTR [%ebp+8]
	CMP DWORD PTR [t58+8], 1
	JE L$6
L$7:
	PUSH DWORD PTR [%ebp+12]
	CALL Element$GetMarried
	ADD %esp, 4
	MOV t60, %eax
	CMP t60, 1
	JE L$12
L$13:
	MOV t4, 0
	JMP L$14
L$14:
	JMP L$8
L$8:
	JMP L$5
L$5:
	JMP L$2
L$2:
	MOV %eax, t1
	JMP L$59
L$12:
	MOV t1, 0
	JMP L$14
L$11:
	JMP L$8
L$10:
	MOV t4, 0
	JMP L$11
L$9:
	MOV t1, 0
	JMP L$11
L$6:
	PUSH DWORD PTR [%ebp+12]
	CALL Element$GetMarried
	ADD %esp, 4
	MOV t59, %eax
	MOV t151, 1
	SUB t151, t59
	CMP t151, 1
	JE L$9
L$60:
	JMP L$10
L$3:
	MOV t1, 0
	JMP L$5
L$0:
	MOV t1, 0
	JMP L$2
L$59:
	MOV %ebx, t152
	MOV %edi, t153
	MOV %esi, t154
	MOV %esp, %ebp
	POP %ebp
	RET

Element$Compare:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t158, %ebx
	MOV t159, %edi
	MOV t160, %esi
L$61:
	MOV t5, 0
	MOV t155, 1
	ADD t155, DWORD PTR [%ebp+16]
	MOV t6, t155
	MOV t7, 0
	MOV t156, DWORD PTR [%ebp+16]
	CMP DWORD PTR [%ebp+12], t156
	JL L$18
L$19:
	CMP t7, 1
	JE L$15
L$16:
	MOV t8, 0
	CMP DWORD PTR [%ebp+12], t6
	JL L$23
L$24:
	MOV t157, 1
	SUB t157, t8
	CMP t157, 1
	JE L$20
L$21:
	MOV t5, 1
	JMP L$22
L$22:
	JMP L$17
L$17:
	MOV %eax, t5
	JMP L$62
L$20:
	MOV t5, 0
	JMP L$22
L$23:
	MOV t8, 1
	JMP L$24
L$15:
	MOV t5, 0
	JMP L$17
L$18:
	MOV t7, 1
	JMP L$19
L$62:
	MOV %ebx, t158
	MOV %edi, t159
	MOV %esi, t160
	MOV %esp, %ebp
	POP %ebp
	RET

List$Init:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t161, %ebx
	MOV t162, %edi
	MOV t163, %esi
L$63:
	MOV t61, DWORD PTR [%ebp+8]
	MOV DWORD PTR [t61+8], 1
	MOV %eax, 1
	JMP L$64
L$64:
	MOV %ebx, t161
	MOV %edi, t162
	MOV %esi, t163
	MOV %esp, %ebp
	POP %ebp
	RET

List$InitNew:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t167, %ebx
	MOV t168, %edi
	MOV t169, %esi
L$65:
	MOV t62, DWORD PTR [%ebp+8]
	MOV t164, DWORD PTR [%ebp+20]
	MOV DWORD PTR [t62+8], t164
	MOV t63, DWORD PTR [%ebp+8]
	MOV t165, DWORD PTR [%ebp+12]
	MOV DWORD PTR [t63+0], t165
	MOV t64, DWORD PTR [%ebp+8]
	MOV t166, DWORD PTR [%ebp+16]
	MOV DWORD PTR [t64+4], t166
	MOV %eax, 1
	JMP L$66
L$66:
	MOV %ebx, t167
	MOV %edi, t168
	MOV %esi, t169
	MOV %esp, %ebp
	POP %ebp
	RET

List$Insert:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t170, %ebx
	MOV t171, %edi
	MOV t172, %esi
L$67:
	MOV t10, DWORD PTR [%ebp+8]
	PUSH 12
	CALL L_halloc
	ADD %esp, 4
	MOV t65, %eax
	MOV t11, t65
	PUSH 0
	PUSH t10
	PUSH DWORD PTR [%ebp+12]
	PUSH t11
	CALL List$InitNew
	ADD %esp, 16
	MOV t66, %eax
	MOV t9, t66
	MOV %eax, t11
	JMP L$68
L$68:
	MOV %ebx, t170
	MOV %edi, t171
	MOV %esi, t172
	MOV %esp, %ebp
	POP %ebp
	RET

List$SetNext:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t174, %ebx
	MOV t175, %edi
	MOV t176, %esi
L$69:
	MOV t67, DWORD PTR [%ebp+8]
	MOV t173, DWORD PTR [%ebp+12]
	MOV DWORD PTR [t67+4], t173
	MOV %eax, 1
	JMP L$70
L$70:
	MOV %ebx, t174
	MOV %edi, t175
	MOV %esi, t176
	MOV %esp, %ebp
	POP %ebp
	RET

List$Delete:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t181, %ebx
	MOV t182, %edi
	MOV t183, %esi
L$71:
	MOV t13, DWORD PTR [%ebp+8]
	MOV t14, 0
	MOV t20, -1
	MOV t16, DWORD PTR [%ebp+8]
	MOV t17, DWORD PTR [%ebp+8]
	MOV t68, DWORD PTR [%ebp+8]
	MOV t18, DWORD PTR [t68+8]
	MOV t69, DWORD PTR [%ebp+8]
	MOV t19, DWORD PTR [t69+0]
	JMP L$27
L$27:
	MOV t177, 1
	SUB t177, t18
	MOV t70, t177
	MOV t179, 1
	SUB t179, t14
	MOV t178, t70
	AND t178, t179
	CMP t178, 1
	JE L$25
L$26:
	MOV %eax, t13
	JMP L$72
L$38:
	JMP L$27
L$37:
	MOV t21, 0
	JMP L$38
L$36:
	MOV t17, t16
	PUSH t16
	CALL List$GetNext
	ADD %esp, 4
	MOV t77, %eax
	MOV t16, t77
	PUSH t16
	CALL List$GetEnd
	ADD %esp, 4
	MOV t78, %eax
	MOV t18, t78
	PUSH t16
	CALL List$GetElem
	ADD %esp, 4
	MOV t79, %eax
	MOV t19, t79
	MOV t20, 1
	JMP L$38
L$30:
	MOV t180, 1
	SUB t180, t14
	CMP t180, 1
	JE L$36
L$73:
	JMP L$37
L$29:
	MOV t21, 0
	JMP L$30
L$33:
	JMP L$30
L$32:
	PUSH -555
	CALL L_println_int
	ADD %esp, 4
	MOV t73, %eax
	PUSH t16
	CALL List$GetNext
	ADD %esp, 4
	MOV t74, %eax
	PUSH t74
	PUSH t17
	CALL List$SetNext
	ADD %esp, 8
	MOV t75, %eax
	MOV t15, t75
	PUSH -555
	CALL L_println_int
	ADD %esp, 4
	MOV t76, %eax
	JMP L$33
L$31:
	PUSH t16
	CALL List$GetNext
	ADD %esp, 4
	MOV t72, %eax
	MOV t13, t72
	JMP L$33
L$35:
	CMP t22, 1
	JE L$31
L$74:
	JMP L$32
L$34:
	MOV t22, 1
	JMP L$35
L$28:
	MOV t14, 1
	MOV t22, 0
	CMP t20, 0
	JL L$34
L$75:
	JMP L$35
L$25:
	PUSH t19
	PUSH DWORD PTR [%ebp+12]
	CALL Element$Equal
	ADD %esp, 8
	MOV t71, %eax
	CMP t71, 1
	JE L$28
L$72:
	MOV %ebx, t181
	MOV %edi, t182
	MOV %esi, t183
	MOV %esp, %ebp
	POP %ebp
	RET

List$Search:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t185, %ebx
	MOV t186, %edi
	MOV t187, %esi
L$76:
	MOV t23, 0
	MOV t24, DWORD PTR [%ebp+8]
	MOV t80, DWORD PTR [%ebp+8]
	MOV t26, DWORD PTR [t80+8]
	MOV t81, DWORD PTR [%ebp+8]
	MOV t25, DWORD PTR [t81+0]
	JMP L$41
L$41:
	MOV t184, 1
	SUB t184, t26
	CMP t184, 1
	JE L$39
L$40:
	MOV %eax, t23
	JMP L$77
L$44:
	PUSH t24
	CALL List$GetNext
	ADD %esp, 4
	MOV t83, %eax
	MOV t24, t83
	PUSH t24
	CALL List$GetEnd
	ADD %esp, 4
	MOV t84, %eax
	MOV t26, t84
	PUSH t24
	CALL List$GetElem
	ADD %esp, 4
	MOV t85, %eax
	MOV t25, t85
	JMP L$41
L$43:
	MOV t27, 0
	JMP L$44
L$42:
	MOV t23, 1
	JMP L$44
L$39:
	PUSH t25
	PUSH DWORD PTR [%ebp+12]
	CALL Element$Equal
	ADD %esp, 8
	MOV t82, %eax
	CMP t82, 1
	JE L$42
L$77:
	MOV %ebx, t185
	MOV %edi, t186
	MOV %esi, t187
	MOV %esp, %ebp
	POP %ebp
	RET

List$GetEnd:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t188, %ebx
	MOV t189, %edi
	MOV t190, %esi
L$78:
	MOV t86, DWORD PTR [%ebp+8]
	MOV %eax, DWORD PTR [t86+8]
	JMP L$79
L$79:
	MOV %ebx, t188
	MOV %edi, t189
	MOV %esi, t190
	MOV %esp, %ebp
	POP %ebp
	RET

List$GetElem:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t191, %ebx
	MOV t192, %edi
	MOV t193, %esi
L$80:
	MOV t87, DWORD PTR [%ebp+8]
	MOV %eax, DWORD PTR [t87+0]
	JMP L$81
L$81:
	MOV %ebx, t191
	MOV %edi, t192
	MOV %esi, t193
	MOV %esp, %ebp
	POP %ebp
	RET

List$GetNext:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t194, %ebx
	MOV t195, %edi
	MOV t196, %esi
L$82:
	MOV t88, DWORD PTR [%ebp+8]
	MOV %eax, DWORD PTR [t88+4]
	JMP L$83
L$83:
	MOV %ebx, t194
	MOV %edi, t195
	MOV %esi, t196
	MOV %esp, %ebp
	POP %ebp
	RET

List$Print:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t198, %ebx
	MOV t199, %edi
	MOV t200, %esi
L$84:
	MOV t28, DWORD PTR [%ebp+8]
	MOV t89, DWORD PTR [%ebp+8]
	MOV t29, DWORD PTR [t89+8]
	MOV t90, DWORD PTR [%ebp+8]
	MOV t30, DWORD PTR [t90+0]
	JMP L$47
L$47:
	MOV t197, 1
	SUB t197, t29
	CMP t197, 1
	JE L$45
L$46:
	MOV %eax, 1
	JMP L$85
L$45:
	PUSH t30
	CALL Element$GetAge
	ADD %esp, 4
	MOV t91, %eax
	PUSH t91
	CALL L_println_int
	ADD %esp, 4
	MOV t92, %eax
	PUSH t28
	CALL List$GetNext
	ADD %esp, 4
	MOV t93, %eax
	MOV t28, t93
	PUSH t28
	CALL List$GetEnd
	ADD %esp, 4
	MOV t94, %eax
	MOV t29, t94
	PUSH t28
	CALL List$GetElem
	ADD %esp, 4
	MOV t95, %eax
	MOV t30, t95
	JMP L$47
L$85:
	MOV %ebx, t198
	MOV %edi, t199
	MOV %esi, t200
	MOV %esp, %ebp
	POP %ebp
	RET

LL$Start:
	PUSH %ebp
	MOV %ebp, %esp
	SUB %esp, 0
	MOV t201, %ebx
	MOV t202, %edi
	MOV t203, %esi
L$86:
	PUSH 12
	CALL L_halloc
	ADD %esp, 4
	MOV t96, %eax
	MOV t32, t96
	PUSH t32
	CALL List$Init
	ADD %esp, 4
	MOV t97, %eax
	MOV t33, t97
	MOV t31, t32
	PUSH t31
	CALL List$Init
	ADD %esp, 4
	MOV t98, %eax
	MOV t33, t98
	PUSH t31
	CALL List$Print
	ADD %esp, 4
	MOV t99, %eax
	MOV t33, t99
	PUSH 12
	CALL L_halloc
	ADD %esp, 4
	MOV t100, %eax
	MOV t34, t100
	PUSH 0
	PUSH 37000
	PUSH 25
	PUSH t34
	CALL Element$Init
	ADD %esp, 16
	MOV t101, %eax
	MOV t33, t101
	PUSH t34
	PUSH t31
	CALL List$Insert
	ADD %esp, 8
	MOV t102, %eax
	MOV t31, t102
	PUSH t31
	CALL List$Print
	ADD %esp, 4
	MOV t103, %eax
	MOV t33, t103
	PUSH 10000000
	CALL L_println_int
	ADD %esp, 4
	MOV t104, %eax
	PUSH 12
	CALL L_halloc
	ADD %esp, 4
	MOV t105, %eax
	MOV t34, t105
	PUSH 1
	PUSH 42000
	PUSH 39
	PUSH t34
	CALL Element$Init
	ADD %esp, 16
	MOV t106, %eax
	MOV t33, t106
	MOV t35, t34
	PUSH t34
	PUSH t31
	CALL List$Insert
	ADD %esp, 8
	MOV t107, %eax
	MOV t31, t107
	PUSH t31
	CALL List$Print
	ADD %esp, 4
	MOV t108, %eax
	MOV t33, t108
	PUSH 10000000
	CALL L_println_int
	ADD %esp, 4
	MOV t109, %eax
	PUSH 12
	CALL L_halloc
	ADD %esp, 4
	MOV t110, %eax
	MOV t34, t110
	PUSH 0
	PUSH 34000
	PUSH 22
	PUSH t34
	CALL Element$Init
	ADD %esp, 16
	MOV t111, %eax
	MOV t33, t111
	PUSH t34
	PUSH t31
	CALL List$Insert
	ADD %esp, 8
	MOV t112, %eax
	MOV t31, t112
	PUSH t31
	CALL List$Print
	ADD %esp, 4
	MOV t113, %eax
	MOV t33, t113
	PUSH 12
	CALL L_halloc
	ADD %esp, 4
	MOV t114, %eax
	MOV t36, t114
	PUSH 0
	PUSH 34000
	PUSH 27
	PUSH t36
	CALL Element$Init
	ADD %esp, 16
	MOV t115, %eax
	MOV t33, t115
	PUSH t35
	PUSH t31
	CALL List$Search
	ADD %esp, 8
	MOV t116, %eax
	PUSH t116
	CALL L_println_int
	ADD %esp, 4
	MOV t117, %eax
	PUSH t36
	PUSH t31
	CALL List$Search
	ADD %esp, 8
	MOV t118, %eax
	PUSH t118
	CALL L_println_int
	ADD %esp, 4
	MOV t119, %eax
	PUSH 10000000
	CALL L_println_int
	ADD %esp, 4
	MOV t120, %eax
	PUSH 12
	CALL L_halloc
	ADD %esp, 4
	MOV t121, %eax
	MOV t34, t121
	PUSH 0
	PUSH 35000
	PUSH 28
	PUSH t34
	CALL Element$Init
	ADD %esp, 16
	MOV t122, %eax
	MOV t33, t122
	PUSH t34
	PUSH t31
	CALL List$Insert
	ADD %esp, 8
	MOV t123, %eax
	MOV t31, t123
	PUSH t31
	CALL List$Print
	ADD %esp, 4
	MOV t124, %eax
	MOV t33, t124
	PUSH 2220000
	CALL L_println_int
	ADD %esp, 4
	MOV t125, %eax
	PUSH t31
	CALL List$Print
	ADD %esp, 4
	MOV t126, %eax
	MOV t33, t126
	PUSH 33300000
	CALL L_println_int
	ADD %esp, 4
	MOV t127, %eax
	PUSH t34
	PUSH t31
	CALL List$Delete
	ADD %esp, 8
	MOV t128, %eax
	MOV t31, t128
	PUSH t31
	CALL List$Print
	ADD %esp, 4
	MOV t129, %eax
	MOV t33, t129
	PUSH 44440000
	CALL L_println_int
	ADD %esp, 4
	MOV t130, %eax
	MOV %eax, 0
	JMP L$87
L$87:
	MOV %ebx, t201
	MOV %edi, t202
	MOV %esi, t203
	MOV %esp, %ebp
	POP %ebp
	RET


